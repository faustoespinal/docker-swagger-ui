---
swagger: "2.0"
tags:
- name: "Workflow Management"
- name: "Metadata Management"
- name: "Task Management"
- name: "Admin"
- name: "Event Services"
paths:
  /admin/config:
    get:
      tags:
      - "Admin"
      summary: "Get all the configuration parameters"
      description: ""
      operationId: "getAllConfig"
      consumes:
      - "text/plain"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
  /admin/sweep/requeue/{workflowId}:
    post:
      tags:
      - "Admin"
      summary: "Queue up all the running workflows for sweep"
      description: ""
      operationId: "requeueSweep"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /admin/task/{tasktype}:
    get:
      tags:
      - "Admin"
      summary: "Get the list of pending tasks for a given task type"
      description: ""
      operationId: "view"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "tasktype"
        in: "path"
        required: true
        type: "string"
      - name: "start"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "count"
        in: "query"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
  /event:
    get:
      tags:
      - "Event Services"
      summary: "Get all the event handlers"
      description: ""
      operationId: "getEventHandlers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EventHandler"
    post:
      tags:
      - "Event Services"
      summary: "Add a new event handler."
      description: ""
      operationId: "addEventHandler"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EventHandler"
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "Event Services"
      summary: "Update an existing event handler."
      description: ""
      operationId: "updateEventHandler"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EventHandler"
      responses:
        default:
          description: "successful operation"
  /event/queues:
    get:
      tags:
      - "Event Services"
      summary: "Get registered queues"
      description: ""
      operationId: "getEventQueues"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "verbose"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
  /event/queues/providers:
    get:
      tags:
      - "Event Services"
      summary: "Get registered queue providers"
      description: ""
      operationId: "getEventQueueProviders"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
  /event/{event}:
    get:
      tags:
      - "Event Services"
      summary: "Get event handlers for a given event"
      description: ""
      operationId: "getEventHandlersForEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "event"
        in: "path"
        required: true
        type: "string"
      - name: "activeOnly"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EventHandler"
  /event/{name}:
    delete:
      tags:
      - "Event Services"
      summary: "Remove an event handler"
      description: ""
      operationId: "removeEventHandlerStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /metadata/taskdefs:
    get:
      tags:
      - "Metadata Management"
      summary: "Gets all task definition"
      description: ""
      operationId: "getTaskDefs"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TaskDef"
    post:
      tags:
      - "Metadata Management"
      summary: "Create new task definition(s)"
      description: ""
      operationId: "registerTaskDef"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/TaskDef"
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "Metadata Management"
      summary: "Update an existing task"
      description: ""
      operationId: "registerTaskDef"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TaskDef"
      responses:
        default:
          description: "successful operation"
  /metadata/taskdefs/{tasktype}:
    get:
      tags:
      - "Metadata Management"
      summary: "Gets the task definition"
      description: ""
      operationId: "getTaskDef"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "tasktype"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskDef"
    delete:
      tags:
      - "Metadata Management"
      summary: "Remove a task definition"
      description: ""
      operationId: "unregisterTaskDef"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "tasktype"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /metadata/workflow:
    get:
      tags:
      - "Metadata Management"
      summary: "Retrieves all workflow definition along with blueprint"
      description: ""
      operationId: "getAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WorkflowDef"
    post:
      tags:
      - "Metadata Management"
      summary: "Create a new workflow definition"
      description: ""
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/WorkflowDef"
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "Metadata Management"
      summary: "Create or update workflow definition"
      description: ""
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/WorkflowDef"
      responses:
        default:
          description: "successful operation"
  /metadata/workflow/{name}:
    get:
      tags:
      - "Metadata Management"
      summary: "Retrieves workflow definition along with blueprint"
      description: ""
      operationId: "get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "version"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/WorkflowDef"
  /tasks:
    post:
      tags:
      - "Task Management"
      summary: "Update a task"
      description: ""
      operationId: "updateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TaskResult"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /tasks/in_progress/{tasktype}:
    get:
      tags:
      - "Task Management"
      summary: "Get in progress tasks.  The results are paginated."
      description: ""
      operationId: "getTasks"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "tasktype"
        in: "path"
        required: true
        type: "string"
      - name: "startKey"
        in: "query"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
  /tasks/in_progress/{workflowId}/{taskRefName}:
    get:
      tags:
      - "Task Management"
      summary: "Get in progress task for a given workflow id."
      description: ""
      operationId: "getPendingTaskForWorkflow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      - name: "taskRefName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
  /tasks/poll/batch/{tasktype}:
    get:
      tags:
      - "Task Management"
      summary: "batch Poll for a task of a certain type"
      description: ""
      operationId: "batchPoll"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "tasktype"
        in: "path"
        required: true
        type: "string"
      - name: "workerid"
        in: "query"
        required: false
        type: "string"
      - name: "domain"
        in: "query"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        required: false
        type: "integer"
        default: 1
        format: "int32"
      - name: "timeout"
        in: "query"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
  /tasks/poll/{tasktype}:
    get:
      tags:
      - "Task Management"
      summary: "Poll for a task of a certain type"
      description: ""
      operationId: "poll"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "tasktype"
        in: "path"
        required: true
        type: "string"
      - name: "workerid"
        in: "query"
        required: false
        type: "string"
      - name: "domain"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
  /tasks/queue/all:
    get:
      tags:
      - "Task Management"
      summary: "Get the details about each queue"
      description: ""
      operationId: "all"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int64"
  /tasks/queue/all/verbose:
    get:
      tags:
      - "Task Management"
      summary: "Get the details about each queue"
      description: ""
      operationId: "allVerbose"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              additionalProperties:
                type: "object"
                additionalProperties:
                  type: "integer"
                  format: "int64"
  /tasks/queue/polldata:
    get:
      tags:
      - "Task Management"
      summary: "Get the last poll data for a given task type"
      description: ""
      operationId: "getPollData"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "taskType"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PollData"
  /tasks/queue/polldata/all:
    get:
      tags:
      - "Task Management"
      summary: "Get the last poll data for a given task type"
      description: ""
      operationId: "getAllPollData"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PollData"
  /tasks/queue/requeue:
    post:
      tags:
      - "Task Management"
      summary: "Requeue pending tasks for all the running workflows"
      description: ""
      operationId: "requeue"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /tasks/queue/requeue/{taskType}:
    post:
      tags:
      - "Task Management"
      summary: "Requeue pending tasks"
      description: ""
      operationId: "requeue"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "taskType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /tasks/queue/sizes:
    get:
      tags:
      - "Task Management"
      summary: "Get Task type queue sizes"
      description: ""
      operationId: "size"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "taskType"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /tasks/queue/{taskType}/{taskId}:
    delete:
      tags:
      - "Task Management"
      summary: "Remove Task from a Task type queue"
      description: ""
      operationId: "remvoeTaskFromQueue"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "taskType"
        in: "path"
        required: true
        type: "string"
      - name: "taskId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /tasks/search:
    get:
      tags:
      - "Task Management"
      summary: "Search for tasks based in payload and other parameters"
      description: "use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC.\
        \  If order is not specified, defaults to ASC"
      operationId: "search"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "start"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "size"
        in: "query"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "freeText"
        in: "query"
        required: false
        type: "string"
        default: "*"
      - name: "query"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResultTaskSummary"
  /tasks/{taskId}:
    get:
      tags:
      - "Task Management"
      summary: "Get task by Id"
      description: ""
      operationId: "getTask"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
  /tasks/{taskId}/ack:
    post:
      tags:
      - "Task Management"
      summary: "Ack Task is recieved"
      description: ""
      operationId: "ack"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        type: "string"
      - name: "workerid"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /tasks/{taskId}/log:
    get:
      tags:
      - "Task Management"
      summary: "Get Task Execution Logs"
      description: ""
      operationId: "getTaskLogs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TaskExecLog"
    post:
      tags:
      - "Task Management"
      summary: "Log Task Execution Details"
      description: ""
      operationId: "log"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow:
    post:
      tags:
      - "Workflow Management"
      summary: "Start a new workflow with StartWorkflowRequest, which allows task\
        \ to be executed in a domain"
      description: ""
      operationId: "startWorkflow"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StartWorkflowRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /workflow/decide/{workflowId}:
    put:
      tags:
      - "Workflow Management"
      summary: "Starts the decision task for a workflow"
      description: ""
      operationId: "decide"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/running/{name}:
    get:
      tags:
      - "Workflow Management"
      summary: "Retrieve all the running workflows"
      description: ""
      operationId: "getRunningWorkflow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "version"
        in: "query"
        required: false
        type: "integer"
        default: 1
        format: "int32"
      - name: "startTime"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "endTime"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
  /workflow/search:
    get:
      tags:
      - "Workflow Management"
      summary: "Search for workflows based in payload and other parameters"
      description: "use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC.\
        \  If order is not specified, defaults to ASC"
      operationId: "search"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "start"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "size"
        in: "query"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "freeText"
        in: "query"
        required: false
        type: "string"
        default: "*"
      - name: "query"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResultWorkflowSummary"
  /workflow/{name}:
    post:
      tags:
      - "Workflow Management"
      summary: "Start a new workflow.  Returns the ID of the workflow instance that\
        \ can be later used for tracking"
      description: ""
      operationId: "startWorkflow"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "version"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "correlationId"
        in: "query"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "object"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /workflow/{name}/correlated/{correlationId}:
    get:
      tags:
      - "Workflow Management"
      summary: "Lists workflows for the given correlation id"
      description: ""
      operationId: "getWorkflows"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "correlationId"
        in: "path"
        required: true
        type: "string"
      - name: "includeClosed"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "includeTasks"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
  /workflow/{workflowId}:
    get:
      tags:
      - "Workflow Management"
      summary: "Gets the workflow by workflow id"
      description: ""
      operationId: "getExecutionStatus"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      - name: "includeTasks"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
    delete:
      tags:
      - "Workflow Management"
      summary: "Terminate workflow execution"
      description: ""
      operationId: "terminate"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      - name: "reason"
        in: "query"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/pause:
    put:
      tags:
      - "Workflow Management"
      summary: "Pauses the workflow"
      description: ""
      operationId: "pauseWorkflow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/remove:
    delete:
      tags:
      - "Workflow Management"
      summary: "Removes the workflow from the system"
      description: ""
      operationId: "delete"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/rerun:
    post:
      tags:
      - "Workflow Management"
      summary: "Reruns the workflow from a specific task"
      description: ""
      operationId: "rerun"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RerunWorkflowRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /workflow/{workflowId}/resetcallbacks:
    post:
      tags:
      - "Workflow Management"
      summary: "Resets callback times of all in_progress tasks to 0"
      description: ""
      operationId: "reset"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/restart:
    post:
      tags:
      - "Workflow Management"
      summary: "Restarts a completed workflow"
      description: ""
      operationId: "restart"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/resume:
    put:
      tags:
      - "Workflow Management"
      summary: "Resumes the workflow"
      description: ""
      operationId: "resumeWorkflow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/retry:
    post:
      tags:
      - "Workflow Management"
      summary: "Retries the last failed task"
      description: ""
      operationId: "retry"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflow/{workflowId}/skiptask/{taskReferenceName}:
    put:
      tags:
      - "Workflow Management"
      summary: "Skips a given task from a current running workflow"
      description: ""
      operationId: "skipTaskFromWorkflow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        type: "string"
      - name: "taskReferenceName"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SkipTaskRequest"
      responses:
        default:
          description: "successful operation"
definitions:
  WorkflowSummary:
    type: "object"
    properties:
      workflowType:
        type: "string"
      version:
        type: "integer"
        format: "int32"
      workflowId:
        type: "string"
      correlationId:
        type: "string"
      startTime:
        type: "string"
      updateTime:
        type: "string"
      endTime:
        type: "string"
      status:
        type: "string"
        enum:
        - "RUNNING"
        - "COMPLETED"
        - "FAILED"
        - "TIMED_OUT"
        - "TERMINATED"
        - "PAUSED"
      input:
        type: "string"
      output:
        type: "string"
      reasonForIncompletion:
        type: "string"
      executionTime:
        type: "integer"
        format: "int64"
      event:
        type: "string"
  Task:
    type: "object"
    properties:
      taskType:
        type: "string"
      status:
        type: "string"
        enum:
        - "IN_PROGRESS"
        - "CANCELED"
        - "FAILED"
        - "COMPLETED"
        - "COMPLETED_WITH_ERRORS"
        - "SCHEDULED"
        - "TIMED_OUT"
        - "READY_FOR_RERUN"
        - "SKIPPED"
      inputData:
        type: "object"
        additionalProperties:
          type: "object"
      referenceTaskName:
        type: "string"
      retryCount:
        type: "integer"
        format: "int32"
      seq:
        type: "integer"
        format: "int32"
      correlationId:
        type: "string"
      pollCount:
        type: "integer"
        format: "int32"
      taskDefName:
        type: "string"
      scheduledTime:
        type: "integer"
        format: "int64"
      startTime:
        type: "integer"
        format: "int64"
      endTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      startDelayInSeconds:
        type: "integer"
        format: "int32"
      retriedTaskId:
        type: "string"
      retried:
        type: "boolean"
        default: false
      callbackFromWorker:
        type: "boolean"
        default: false
      responseTimeoutSeconds:
        type: "integer"
        format: "int32"
      workflowInstanceId:
        type: "string"
      taskId:
        type: "string"
      reasonForIncompletion:
        type: "string"
      callbackAfterSeconds:
        type: "integer"
        format: "int64"
      workerId:
        type: "string"
      outputData:
        type: "object"
        additionalProperties:
          type: "object"
      workflowTask:
        $ref: "#/definitions/WorkflowTask"
      domain:
        type: "string"
      queueWaitTime:
        type: "integer"
        format: "int64"
      taskStatus:
        type: "string"
        enum:
        - "IN_PROGRESS"
        - "CANCELED"
        - "FAILED"
        - "COMPLETED"
        - "COMPLETED_WITH_ERRORS"
        - "SCHEDULED"
        - "TIMED_OUT"
        - "READY_FOR_RERUN"
        - "SKIPPED"
  Action:
    type: "object"
    properties:
      action:
        type: "string"
        enum:
        - "start_workflow"
        - "complete_task"
        - "fail_task"
      start_workflow:
        $ref: "#/definitions/StartWorkflow"
      complete_task:
        $ref: "#/definitions/TaskDetails"
      fail_task:
        $ref: "#/definitions/TaskDetails"
      expandInlineJSON:
        type: "boolean"
        default: false
  WorkflowDef:
    type: "object"
    properties:
      ownerApp:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createdBy:
        type: "string"
      updatedBy:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      version:
        type: "integer"
        format: "int32"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowTask"
      inputParameters:
        type: "array"
        items:
          type: "string"
      outputParameters:
        type: "object"
        additionalProperties:
          type: "object"
      failureWorkflow:
        type: "string"
      schemaVersion:
        type: "integer"
        format: "int32"
  SkipTaskRequest:
    type: "object"
    properties:
      taskInput:
        type: "object"
        additionalProperties:
          type: "object"
      taskOutput:
        type: "object"
        additionalProperties:
          type: "object"
  TaskExecLog:
    type: "object"
    properties:
      log:
        type: "string"
      taskId:
        type: "string"
      createdTime:
        type: "integer"
        format: "int64"
  PollData:
    type: "object"
    properties:
      queueName:
        type: "string"
      domain:
        type: "string"
      workerId:
        type: "string"
      lastPollTime:
        type: "integer"
        format: "int64"
  Workflow:
    type: "object"
    properties:
      ownerApp:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createdBy:
        type: "string"
      updatedBy:
        type: "string"
      status:
        type: "string"
        enum:
        - "RUNNING"
        - "COMPLETED"
        - "FAILED"
        - "TIMED_OUT"
        - "TERMINATED"
        - "PAUSED"
      endTime:
        type: "integer"
        format: "int64"
      workflowId:
        type: "string"
      parentWorkflowId:
        type: "string"
      parentWorkflowTaskId:
        type: "string"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      input:
        type: "object"
        additionalProperties:
          type: "object"
      output:
        type: "object"
        additionalProperties:
          type: "object"
      workflowType:
        type: "string"
      version:
        type: "integer"
        format: "int32"
      correlationId:
        type: "string"
      reRunFromWorkflowId:
        type: "string"
      reasonForIncompletion:
        type: "string"
      schemaVersion:
        type: "integer"
        format: "int32"
      event:
        type: "string"
      taskToDomain:
        type: "object"
        additionalProperties:
          type: "string"
      startTime:
        type: "integer"
        format: "int64"
  EventHandler:
    type: "object"
    properties:
      name:
        type: "string"
      event:
        type: "string"
      condition:
        type: "string"
      actions:
        type: "array"
        items:
          $ref: "#/definitions/Action"
      active:
        type: "boolean"
        default: false
  WorkflowTask:
    type: "object"
    properties:
      name:
        type: "string"
      taskReferenceName:
        type: "string"
      description:
        type: "string"
      inputParameters:
        type: "object"
        additionalProperties:
          type: "object"
      type:
        type: "string"
      dynamicTaskNameParam:
        type: "string"
      caseValueParam:
        type: "string"
      caseExpression:
        type: "string"
      decisionCases:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/WorkflowTask"
      dynamicForkJoinTasksParam:
        type: "string"
      dynamicForkTasksParam:
        type: "string"
      dynamicForkTasksInputParamName:
        type: "string"
      defaultCase:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowTask"
      forkTasks:
        type: "array"
        items:
          type: "array"
          items:
            $ref: "#/definitions/WorkflowTask"
      startDelay:
        type: "integer"
        format: "int32"
      joinOn:
        type: "array"
        items:
          type: "string"
      sink:
        type: "string"
      optional:
        type: "boolean"
        default: false
      subWorkflowParam:
        $ref: "#/definitions/SubWorkflowParams"
  StartWorkflow:
    type: "object"
    properties:
      name:
        type: "string"
      version:
        type: "integer"
        format: "int32"
      correlationId:
        type: "string"
      input:
        type: "object"
        additionalProperties:
          type: "object"
  StartWorkflowRequest:
    type: "object"
    properties:
      name:
        type: "string"
      version:
        type: "integer"
        format: "int32"
      correlationId:
        type: "string"
      input:
        type: "object"
        additionalProperties:
          type: "object"
      taskToDomain:
        type: "object"
        additionalProperties:
          type: "string"
  SubWorkflowParams:
    type: "object"
    properties:
      name:
        type: "string"
      version:
        type: "object"
  SearchResultTaskSummary:
    type: "object"
    properties:
      totalHits:
        type: "integer"
        format: "int64"
      results:
        type: "array"
        items:
          $ref: "#/definitions/TaskSummary"
  TaskDetails:
    type: "object"
    properties:
      workflowId:
        type: "string"
      taskRefName:
        type: "string"
      output:
        type: "object"
        additionalProperties:
          type: "object"
  TaskDef:
    type: "object"
    properties:
      ownerApp:
        type: "string"
      createTime:
        type: "integer"
        format: "int64"
      updateTime:
        type: "integer"
        format: "int64"
      createdBy:
        type: "string"
      updatedBy:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      retryCount:
        type: "integer"
        format: "int32"
      timeoutSeconds:
        type: "integer"
        format: "int64"
      inputKeys:
        type: "array"
        items:
          type: "string"
      outputKeys:
        type: "array"
        items:
          type: "string"
      timeoutPolicy:
        type: "string"
        enum:
        - "RETRY"
        - "TIME_OUT_WF"
        - "ALERT_ONLY"
      retryLogic:
        type: "string"
        enum:
        - "FIXED"
        - "EXPONENTIAL_BACKOFF"
      retryDelaySeconds:
        type: "integer"
        format: "int32"
      responseTimeoutSeconds:
        type: "integer"
        format: "int32"
      concurrentExecLimit:
        type: "integer"
        format: "int32"
      inputTemplate:
        type: "object"
        additionalProperties:
          type: "object"
  TaskSummary:
    type: "object"
    properties:
      workflowId:
        type: "string"
      correlationId:
        type: "string"
      scheduledTime:
        type: "string"
      startTime:
        type: "string"
      updateTime:
        type: "string"
      endTime:
        type: "string"
      status:
        type: "string"
        enum:
        - "IN_PROGRESS"
        - "CANCELED"
        - "FAILED"
        - "COMPLETED"
        - "COMPLETED_WITH_ERRORS"
        - "SCHEDULED"
        - "TIMED_OUT"
        - "READY_FOR_RERUN"
        - "SKIPPED"
      reasonForIncompletion:
        type: "string"
      executionTime:
        type: "integer"
        format: "int64"
      queueWaitTime:
        type: "integer"
        format: "int64"
      taskDefName:
        type: "string"
      taskType:
        type: "string"
      input:
        type: "string"
      output:
        type: "string"
      taskId:
        type: "string"
  TaskResult:
    type: "object"
    properties:
      workflowInstanceId:
        type: "string"
      taskId:
        type: "string"
      reasonForIncompletion:
        type: "string"
      callbackAfterSeconds:
        type: "integer"
        format: "int64"
      workerId:
        type: "string"
      status:
        type: "string"
        enum:
        - "IN_PROGRESS"
        - "FAILED"
        - "COMPLETED"
        - "SCHEDULED"
      outputData:
        type: "object"
        additionalProperties:
          type: "object"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/TaskExecLog"
  SearchResultWorkflowSummary:
    type: "object"
    properties:
      totalHits:
        type: "integer"
        format: "int64"
      results:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowSummary"
  RerunWorkflowRequest:
    type: "object"
    properties:
      reRunFromWorkflowId:
        type: "string"
      workflowInput:
        type: "object"
        additionalProperties:
          type: "object"
      reRunFromTaskId:
        type: "string"
      taskInput:
        type: "object"
        additionalProperties:
          type: "object"
      correlationId:
        type: "string"
